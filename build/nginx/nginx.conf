# 配置权限用户
user nginx;
# 配置Nginx要开启的进程数
worker_processes  1;
# 事件模块
events {
	# use epoll # 不写的话，nginx也会自动选择
	# 定义每条woker的进程连接数量
    worker_connections  1024;
}
# http 模块，外到内有http块、server块、location块，同时各个模块有各自的属性元素
# 一个http处理模块内部可进行http的相关参数配置，内可以包含多个server块 
http {
	# 负载均衡相关，暂不考虑
	# upstream backend{
	#    ip_hash;
	#    server xxx.xxx.x.x;
	#    server xxx.xxx.x.x:8080;
	#    server xxx.xxx.x.x max_fails=5 fail_timeout=30s;
	#    server xxx.xxx.x.x down;
	# }
	
	# 指定服务端向客户端发送的请求头对应的文件格式
    include       mime.types;
    default_type  application/octet-stream;
    # 启动以提高 Nginx 静态资源托管效率
    sendfile        on;
    # 设置长连接超时时间
    keepalive_timeout  65;
    # 配置访问错误时返回的内容
    error_page   500 502 503 504  /50x.html;
	# 配置虚拟机
    server {
    	# 配置监听的端口
        listen       80;
        # 配置虚拟主机机名称，用于与http请求header头部的Host匹配
        server_name  localhost;
        rewrite ^/(.*)$ http://127.0.0.1:8000/$1 permanent;
		# 配置定位
        location / {
        	# 配置重定向
            try_files $uri $uri/ /index.html;
            # 配置文件路径
	    	root   /usr/share/nginx/html;
	    	# 设置缓存过期时间
            expires 1h;
        }
		location = /50x.html {
	        root   /usr/share/nginx/html;
	    }
    }

    server {
    	# 限制请求body的大小，超过返回 413 request entity too large
        client_max_body_size 20M;
        listen       8001;
        server_name  localhost:8001;

        location / {
        	# 配置限速
            limit_rate 256k;
            # 配置代理转发
            proxy_pass http://172.31.8.43:8000;
            # 配置http版本
            proxy_http_version 1.1;
            # 配置请求头
            # 配置协议升级，主要用于反向代理websocket，这里好像没啥作用
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection keep-alive;
            proxy_set_header Host $host;
            # 配置缓存抓取策略
            proxy_cache_bypass $http_upgrade;
        }

        location /static/ {
            alias ./PythonBC/BCRUPro/static/;
        }
    }
}
